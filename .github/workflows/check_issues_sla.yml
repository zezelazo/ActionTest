# Name the workflow
name: Tag unassigned issues

# Define the event that triggers the workflow
on:
  # Run the workflow every 5 minutes
  schedule:
    - cron: "*/5 * * * *"
  workflow_dispatch:

# Define the job that the workflow will run
jobs:
  tag-issues:
    runs-on: ubuntu-latest

    env:
      GH_TOKEN: ${{ github.token }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
      
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.x'

      - name: Install PowerShell
        run: |
          sudo snap install powershell --classic


      - name: Verify GitHub CLI is installed
        run: gh --version
      
      
      # Retrieve a list of issues and parse them as JSON
      - name: List issues
        shell: pwsh
        run: |
          $issues = gh issue list --json "number,title,createdAt,labels"
          $issues_decoded = $issues | ConvertFrom-Json
          Write-Host "Retrieved a total of $($issues_decoded.Count) issues."

      # Loop through the list of issues and tag them as necessary
      - name: Tag issues
        shell: pwsh
        run: |
          $time_threshold = [DateTime]::UtcNow.AddMinutes(-6).ToString("o")
          $blocker_tag = "blocker"
          $non_blocker_tag = "non-blocker"
          $ignored_tag = "type-repo_work"

          foreach ($issue in $issues_decoded) {
            $issue_number = $issue.number
            $issue_title = $issue.title
            $issue_created_at = $issue.created_at
            $issue_labels = $issue.labels.name

            if ($issue_labels.Contains($ignored_tag)) {
              Write-Host "Skipping issue $issue_number ($issue_title) as it has the '$ignored_tag' tag."
            } elseif ($issue_labels.Contains($blocker_tag)) {
              if ([DateTime]::Parse($issue_created_at) -lt $time_threshold) {
                Write-Host "Skipping issue $issue_number ($issue_title) as it is still within the 3 minute threshold."
              } elseif ($issue.assignee) {
                Write-Host "Skipping issue $issue_number ($issue_title) as it already has an assigned user."
              } else {
                gh issue label add $issue_number out-tte
                Write-Host "Added 'out-tte' tag to issue $issue_number ($issue_title) as it was unassigned for more than 3 minutes and has the 'blocker' tag."
              }
            } else {
              if ([DateTime]::Parse($issue_created_at) -lt $time_threshold) {
                gh issue label add $issue_number blocker
                Write-Host "Added 'blocker' tag to issue $issue_number ($issue_title) as it didn't have any tag yet."
              } else {
                gh issue label add $issue_number non-blocker
                Write-Host "Added 'non-blocker' tag to issue $issue_number ($issue_title) as it was unassigned for more than 6 minutes and didn't have the 'blocker' tag."
              }
            }
          }