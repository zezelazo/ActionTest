# Name the workflow
name: Tag unassigned issues

# Define the event that triggers the workflow
on:
  # Run the workflow every 5 minutes
  workflow_dispatch:

# Define the job that the workflow will run
jobs:
  tag-issues:
    runs-on: ubuntu-latest

    env:
      GH_TOKEN: ${{ github.token }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
      
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.x'

      - name: Install PowerShell
        run: |
          sudo snap install powershell --classic


      - name: Verify GitHub CLI is installed
        run: gh --version
      
      
      # Retrieve a list of issues and parse them as JSON
      # Loop through the list of issues and tag them as necessary
      - name: Tag issues
        shell: pwsh
        run: |
          $time_threshold_blocker = [DateTime]::UtcNow.AddMinutes(-6).ToString("o")
          $time_threshold_non_blocker = [DateTime]::UtcNow.AddMinutes(-20).ToString("o")
          $blocker_tag = "blocking"
          $non_blocker_tag = "Non-Blocking"
          $ignored_tag = "type-repo_work"
          $out_tte_tag = "out-tte"

          # Get the list of issues
          gh issue list --json number,labels,assignees,created > issues.json
          
          # Parse the JSON file using PowerShell and print the labels and assignees of each issue
          $issues = Get-Content issues.json | ConvertFrom-Json

          # Iterate over all the repo issues
          foreach ($issue in $issues) {
            
            if (-not ($issue.labels.Count -gt 0)) {
              gh issue edit $issue.number --add-label $non_blocker_tag
            }

            if ($ignored_tag, $out_tte_tag -notin $issue_labels -and (-not $issue.assignee)) {
              if ($issue.labels.Contains($blocker_tag)) {
                if ([DateTime]::Parse($issue.created) -lt $time_threshold_blocker) {
                  gh issue add-label $issue.number $out_tte_tag
                }
              } else {
                if ([DateTime]::Parse($issue.created) -lt $time_threshold_non_blocker) {
                  gh issue add-label $issue.number $out_tte_tag
                }
              }
            }

          }